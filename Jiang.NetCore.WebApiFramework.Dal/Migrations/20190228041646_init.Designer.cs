// <auto-generated />
using System;
using Jiang.NetCore.WebApiFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Jiang.NetCore.WebApiFramework.Dal.Migrations
{
    [DbContext(typeof(ManageContext))]
    [Migration("20190228041646_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Jiang.NetCore.WebApiFramework.Auth_Auth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ButtonId")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("FeatureId");

                    b.Property<DateTime>("ModifyTime")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(100);

                    b.Property<string>("Url")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Auth_Auth");
                });

            modelBuilder.Entity("Jiang.NetCore.WebApiFramework.Auth_Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateTime");

                    b.Property<DateTime>("ModifyTime")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(100);

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.ToTable("Auth_Department");
                });

            modelBuilder.Entity("Jiang.NetCore.WebApiFramework.Auth_Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("MenuId");

                    b.Property<DateTime>("ModifyTime")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(100);

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.ToTable("Auth_Feature");
                });

            modelBuilder.Entity("Jiang.NetCore.WebApiFramework.Auth_Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("DepartmentId");

                    b.Property<DateTime>("ModifyTime")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(100);

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.ToTable("Auth_Job");
                });

            modelBuilder.Entity("Jiang.NetCore.WebApiFramework.Auth_Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("MenuIcon")
                        .HasMaxLength(100);

                    b.Property<DateTime>("ModifyTime")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ParentId");

                    b.Property<string>("Remark")
                        .HasMaxLength(100);

                    b.Property<int>("Sort");

                    b.Property<string>("Url")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Auth_Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e229079-e8da-4db2-ae94-3160ba229b14"),
                            CreateTime = new DateTime(2019, 2, 28, 12, 16, 45, 256, DateTimeKind.Local).AddTicks(9980),
                            ModifyTime = new DateTime(2019, 2, 28, 12, 16, 45, 257, DateTimeKind.Local).AddTicks(711),
                            Name = "默认",
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Remark = "默认菜单",
                            Sort = 0,
                            Url = ""
                        });
                });

            modelBuilder.Entity("Jiang.NetCore.WebApiFramework.Auth_Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateTime");

                    b.Property<DateTime>("ModifyTime")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Remark")
                        .HasMaxLength(100);

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.ToTable("Auth_Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7f744b4-4f18-4a56-a3a4-a8ea9933f998"),
                            Code = "admin",
                            CreateTime = new DateTime(2019, 2, 28, 12, 16, 45, 259, DateTimeKind.Local).AddTicks(5354),
                            ModifyTime = new DateTime(2019, 2, 28, 12, 16, 45, 259, DateTimeKind.Local).AddTicks(5378),
                            Name = "超级管理员",
                            Sort = 0
                        });
                });

            modelBuilder.Entity("Jiang.NetCore.WebApiFramework.Auth_RoleFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<Guid>("FeatureId");

                    b.Property<DateTime>("ModifyTime")
                        .IsConcurrencyToken();

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("Auth_RoleFeature");
                });

            modelBuilder.Entity("Jiang.NetCore.WebApiFramework.Auth_RoleUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<DateTime>("ModifyTime")
                        .IsConcurrencyToken();

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Auth_RoleUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("365584e2-cc61-4043-b142-1dc5683d49de"),
                            CreateTime = new DateTime(2019, 2, 28, 12, 16, 45, 265, DateTimeKind.Local).AddTicks(2625),
                            ModifyTime = new DateTime(2019, 2, 28, 12, 16, 45, 265, DateTimeKind.Local).AddTicks(2637),
                            RoleId = new Guid("b7f744b4-4f18-4a56-a3a4-a8ea9933f998"),
                            UserId = new Guid("e133e990-e216-4273-b7d5-7720b0fc4c45")
                        });
                });

            modelBuilder.Entity("Jiang.NetCore.WebApiFramework.Auth_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("IdCard")
                        .HasMaxLength(20);

                    b.Property<bool>("IsFreeze");

                    b.Property<Guid>("JobId");

                    b.Property<DateTime>("ModifyTime")
                        .IsConcurrencyToken();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(11);

                    b.Property<string>("RealName")
                        .HasMaxLength(20);

                    b.Property<string>("Remark")
                        .HasMaxLength(100);

                    b.Property<int>("Sex");

                    b.Property<string>("Telephone")
                        .HasMaxLength(20);

                    b.Property<int>("Type");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Auth_User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e133e990-e216-4273-b7d5-7720b0fc4c45"),
                            CreateTime = new DateTime(2019, 2, 28, 12, 16, 45, 259, DateTimeKind.Local).AddTicks(7785),
                            IsFreeze = false,
                            JobId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifyTime = new DateTime(2019, 2, 28, 12, 16, 45, 259, DateTimeKind.Local).AddTicks(7788),
                            Password = "e10adc3949ba59abbe56e057f20f883e",
                            RealName = "接口测试账号",
                            Sex = 0,
                            Type = 0,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("be6b10d5-e9f3-4224-b0d4-35dfe4af582a"),
                            CreateTime = new DateTime(2019, 2, 28, 12, 16, 45, 264, DateTimeKind.Local).AddTicks(847),
                            IsFreeze = false,
                            JobId = new Guid("00000000-0000-0000-0000-000000000000"),
                            ModifyTime = new DateTime(2019, 2, 28, 12, 16, 45, 264, DateTimeKind.Local).AddTicks(861),
                            Password = "14e1b600b1fd579f47433b88e8d85291",
                            RealName = "系统管理员",
                            Sex = 0,
                            Type = 0,
                            UserName = "netson_admin"
                        });
                });

            modelBuilder.Entity("Jiang.NetCore.WebApiFramework.Auth_UserLoginHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<DateTime>("LogoutTime");

                    b.Property<DateTime>("ModifyTime")
                        .IsConcurrencyToken();

                    b.Property<int>("State");

                    b.Property<Guid>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Auth_UserLoginHistory");
                });

            modelBuilder.Entity("Jiang.NetCore.WebApiFramework.Sys_OperateLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionMemo")
                        .HasMaxLength(255);

                    b.Property<string>("ActionName")
                        .HasMaxLength(50);

                    b.Property<string>("ClientIp")
                        .HasMaxLength(50);

                    b.Property<string>("ControllerName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Data")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("ModifyTime")
                        .IsConcurrencyToken();

                    b.Property<string>("RequestType")
                        .HasMaxLength(20);

                    b.Property<int>("ResponseCode");

                    b.Property<string>("ResponseMessage")
                        .HasMaxLength(255);

                    b.Property<string>("ServerIp")
                        .HasMaxLength(50);

                    b.Property<string>("Url")
                        .HasMaxLength(500);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Sys_OperateLog");
                });
#pragma warning restore 612, 618
        }
    }
}
